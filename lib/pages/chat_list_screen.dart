import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:my_game_app/pages/chat_page.dart';

class ChatListPage extends StatelessWidget {
  const ChatListPage({super.key});

  Future<List<QueryDocumentSnapshot>> fetchMatches() async {
    //* currentUser deÄŸiÅŸkenine firebaseden aldÄ±ÄŸÄ±mÄ±z var olan kullanÄ±cÄ± bilgisi atandÄ±
    final currentUser = FirebaseAuth.instance.currentUser;
    //* uygulamada biri yoksa boÅŸ dÃ¶necek
    if (currentUser == null) return [];

    //* eÅŸleÅŸme ile ilgili kÄ±sÄ±m firebase de matches collection'Ä±nda, Bu satÄ±r sayesinde uygulama sadece sana ait eÅŸleÅŸmeleri Ã§eker.
    //* Bu veri sonra ekranda gÃ¶sterilir.
    final matchesSnapshot = await FirebaseFirestore.instance
        .collection('matches')
        .where('users', arrayContains: currentUser.uid)
         //* .orderBy('timestamp', descending: true)
        .get();

    return matchesSnapshot.docs;
  }

  //* eÅŸleÅŸme listesindeki iki kullanÄ±cÄ±dan karÅŸÄ± tarafÄ± yani ben olmayani bulmak iÃ§in yazÄ±lmÄ±ÅŸ.
  String getOtherUserId(List<dynamic> users, String currentUserId) {
    return users.firstWhere((uid) => uid != currentUserId);
  }

  @override
  Widget build(BuildContext context) {
    final currentUser = FirebaseAuth.instance.currentUser;

    return Scaffold(
      appBar: AppBar(
        title: const Text('Sohbetler'),
      ),
      body: FutureBuilder<List<QueryDocumentSnapshot>>(
        future: fetchMatches(),
        //* AsyncSnapshot<List<QueryDocumentSnapshot<Object?>>> sÄ±nÄ±fÄ± iÃ§erisinde snapshot 

        //* beklerken daire dÃ¶ndÃ¼rÃ¼r.
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }
          //* ğŸ“Œ "EÄŸer veri hiÃ§ gelmediyse (!snapshot.hasData)
          //* veya veri geldiyse ama boÅŸsa (snapshot.data!.isEmpty)
          //* o zaman ekrana 'HenÃ¼z eÅŸleÅŸme yok' yaz."**

          if (!snapshot.hasData || snapshot.data!.isEmpty) {
            return const Center(child: Text('HenÃ¼z eÅŸleÅŸme yok.'));
          }

          //* EÄŸer snapshot iÃ§indeki data varsa (yani null deÄŸilse), onu matches adÄ±nda bir deÄŸiÅŸkene ata.
          final matches = snapshot.data!;


          //* chatList sayfasÄ±nÄ± listeleme olarak kullanÄ±yoruz o yÃ¼zden ListView kullanÄ±lÄ±yor.
          return ListView.builder(
            //* itemCount dediÄŸin var olan konuÅŸmalar sayÄ±sÄ± bunu matches.length ile biliyoruz.
            itemCount: matches.length,

            //* itemBuilder iÃ§erisinde context
            itemBuilder: (context, index) {
              //* Firebase'den gelen ham veriyi, bir harita (map) hÃ¢line getirip, kolayca kullanabilmemizi saÄŸlar.
              final matchData = matches[index].data() as Map<String, dynamic>;

              //* Bu satÄ±r, uygulamadaki sohbet eÅŸleÅŸmesinde karÅŸÄ± tarafÄ±n kullanÄ±cÄ± ID'sini bulmak iÃ§in yazÄ±lmÄ±ÅŸ.
              final otherUserId = getOtherUserId(matchData['users'], currentUser!.uid);


              return FutureBuilder<DocumentSnapshot>(

                //* "profiles" koleksiyonunda, IDâ€™si otherUserId olan belgeyi Ã§ek.
                future: FirebaseFirestore.instance.collection('profiles').doc(otherUserId).get(),
                builder: (context, profileSnapshot) {

                  //* EÄŸer henÃ¼z veri gelmediyse (bekleme aÅŸamasÄ±ndaysa), ekrana geÃ§ici olarak "YÃ¼kleniyor..." yazan bir kutucuk gÃ¶sterilir.
                  if (!profileSnapshot.hasData) {
                    return ListTile(title: Text('YÃ¼kleniyor...'));
                  }
                  //* profileSnapshot.data! â†’ Firestoreâ€™dan gelen belge
                  //* .data() â†’ Belge iÃ§indeki alanlara eriÅŸim saÄŸlar
                  //* as Map<String, dynamic>? â†’ "Bu veri bir Map'tir (yani JSON gibi)."

                  final profileData = profileSnapshot.data!.data() as Map<String, dynamic>?;

                  
                  return ListTile(
                    leading: CircleAvatar(
                      backgroundImage: profileData != null && profileData['imageUrls'] != null && (profileData['imageUrls'] as List).isNotEmpty
                          ? NetworkImage(profileData['imageUrls'][0])
                          : null,
                      child: profileData == null || profileData['imageUrls'] == null || (profileData['imageUrls'] as List).isEmpty
                          ? const Icon(Icons.person)
                          : null,
                    ),
                    title: Text(profileData?['name'] ?? 'KullanÄ±cÄ±'),
                    subtitle: const Text('Mesaja gitmek iÃ§in dokun'),
                    onTap: () {
                      //* chatPage dosyasÄ±na geÃ§iÅŸ yapar
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (_) => ChatPage(
                            //* karÅŸÄ± kullanÄ±cÄ±nÄ±n idsine denk gelir
                            chatUserId: otherUserId,
                            //* varsa kullanÄ±cÄ±nÄ±n adÄ± yazar, yoksa KullanÄ±cÄ± yazar.
                            chatUserName: profileData?['name'] ?? 'KullanÄ±cÄ±',
                          ),
                        ),
                      );
                    },
                  );
                },
              );
            },
          );
        },
      ), 
    );
  }
}
